library(tidyverse)
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Predicting Iris Species"),
sidebarPanel(
numericInput('id1', 'Numeric input, Sepal Length', 0, min = 0, max = 10),
numericInput('id2', 'Numeric input, Sepal Width', 0, min = 0, max = 10),
numericInput('id3', 'Numeric input, Petal Length', 0, min = 0, max = 10),
numericInput('id4', 'Numeric input, Petal Width', 0, min = 0, max = 10),
submitButton('Submit')
),
mainPanel(
h3('Results of prediction'),
h4('You entered'),
verbatimTextOutput("oid1"),
h4('You entered'),
verbatimTextOutput("oid2"),
h4('You entered'),
verbatimTextOutput("oid3"),
h4('You entered'),
verbatimTextOutput("oid4"),
h4('Which resulted in a prediction of '),
verbatimTextOutput("prediction")
)
))
setwd("C:/Users/Open user/Desktop/iris-prediction")
library(shiny)
if(!require(pacman)) install.packages("pacman")
pacman::p_load(
tidymodels,
shiny
)
# Load the iris dataset
data(iris)
set.seed(123)
split_data <- initial_split(iris, prop = 0.7, strata = Species)
training_data <- training(split_data)
testing_data <- testing(split_data)
# Model specification
iris_spec <- rand_forest() %>%
set_engine('ranger') %>%
set_mode('classification')
# Create the recipe
iris_recipe <- recipe(Species ~ ., data = training_data) %>%
step_impute_median() %>%
step_dummy(all_nominal_predictors())
# Create the workflow
iris_workflow <- workflow() %>%
add_model(iris_spec) %>%
add_recipe(iris_recipe)
# Fit the model
iris_fit <- iris_workflow %>%
fit(data = training_data)
if(!require(pacman)) install.packages("pacman")
pacman::p_load(
tidymodels,
shiny,
ranger
)
# Split the data
set.seed(123)
split_data <- initial_split(iris, prop = 0.7, strata = Species)
training_data <- training(split_data)
testing_data <- testing(split_data)
# Model specification
iris_spec <- rand_forest() %>%
set_engine('ranger') %>%
set_mode('classification')
# Create the recipe
iris_recipe <- recipe(Species ~ ., data = training_data) %>%
step_impute_median() %>%
step_dummy(all_nominal_predictors())
# Create the workflow
iris_workflow <- workflow() %>%
add_model(iris_spec) %>%
add_recipe(iris_recipe)
# Fit the model
iris_fit <- iris_workflow %>%
fit(data = training_data)
shinyServer(function(input, output) {
output$oid1 <- renderPrint({ input$id1 })
output$oid2 <- renderPrint({ input$id2 })
output$oid3 <- renderPrint({ input$id3 })
output$oid4 <- renderPrint({ input$id4 })
output$prediction <- renderPrint({
# Create a data frame from user inputs
new_data <- data.frame(
Sepal.Length = as.numeric(input$id1),
Sepal.Width = as.numeric(input$id2),
Petal.Length = as.numeric(input$id3),
Petal.Width = as.numeric(input$id4)
)
# Make a prediction
prediction <- predict(iris_fit, new_data)
# Display the prediction result
as.character(prediction$.pred_class)
})
})
runApp()
setwd("C:/Users/Open user/Desktop/iris-prediction")
if(!require(pacman)) install.packages("pacman")
pacman::p_load(
tidymodels,
shiny,
ranger
)
# Load the iris dataset
data(iris)
# Split the data
set.seed(123)
split_data <- initial_split(iris, prop = 0.7, strata = Species)
training_data <- training(split_data)
testing_data <- testing(split_data)
# Model specification
iris_spec <- rand_forest() %>%
set_engine('ranger') %>%
set_mode('classification')
# Create the recipe
iris_recipe <- recipe(Species ~ ., data = training_data) %>%
step_impute_median() %>%
step_dummy(all_nominal_predictors())
# Create the workflow
iris_workflow <- workflow() %>%
add_model(iris_spec) %>%
add_recipe(iris_recipe)
# Fit the model
iris_fit <- iris_workflow %>%
fit(data = training_data)
shinyServer(function(input, output) {
output$oid1 <- renderPrint({ input$id1 })
output$oid2 <- renderPrint({ input$id2 })
output$oid3 <- renderPrint({ input$id3 })
output$oid4 <- renderPrint({ input$id4 })
output$prediction <- renderPrint({
# Create a data frame from user inputs
new_data <- data.frame(
Sepal.Length = as.numeric(input$id1),
Sepal.Width = as.numeric(input$id2),
Petal.Length = as.numeric(input$id3),
Petal.Width = as.numeric(input$id4)
)
# Make a prediction
prediction <- predict(iris_fit, new_data)
# Display the prediction result
as.character(prediction$.pred_class)
})
})
runApp()
